---
description: 
globs: 
alwaysApply: true
---
# Package Integration Guide

## Core Dependencies

### Required Packages
```json
{
  "dependencies": {
    "vue": "^3.3.0",
    "vue-router": "^4.2.0",
    "pinia": "^2.1.0",
    "axios": "^1.6.0",
    "@vueuse/core": "^10.0.0",
    "date-fns": "^2.30.0",
    "@headlessui/vue": "^1.7.0",
    "@heroicons/vue": "^2.0.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "vite": "^4.5.0",
    "@vitejs/plugin-vue": "^4.5.0",
    "vitest": "^0.34.0",
    "@vue/test-utils": "^2.4.0",
    "cypress": "^13.0.0",
    "tailwindcss": "^3.3.0",
    "postcss": "^8.4.0",
    "autoprefixer": "^10.4.0",
    "eslint": "^8.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "prettier": "^3.0.0"
  }
}
```

## Package Configuration

### Vite Configuration
```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import path from 'path'

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src')
    }
  },
  server: {
    port: 3000
  },
  build: {
    target: 'esnext',
    sourcemap: true
  }
})
```

### TypeScript Configuration
```json
// tsconfig.json
{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "jsx": "preserve",
    "sourceMap": true,
    "resolveJsonModule": true,
    "esModuleInterop": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"]
  },
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.vue"],
  "exclude": ["node_modules"]
}
```

### ESLint Configuration
```javascript
// .eslintrc.js
module.exports = {
  root: true,
  env: {
    node: true,
    browser: true,
    es2021: true
  },
  extends: [
    'plugin:vue/vue3-recommended',
    'eslint:recommended',
    '@vue/typescript/recommended',
    'prettier'
  ],
  parserOptions: {
    ecmaVersion: 2021
  },
  rules: {
    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off'
  }
}
```

### Prettier Configuration
```json
// .prettierrc
{
  "semi": false,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "none",
  "printWidth": 80,
  "bracketSpacing": true,
  "arrowParens": "avoid"
}
```

## Adding New Packages

### Guidelines
1. Evaluate package necessity
2. Check compatibility with Vue 3
3. Review package maintenance status
4. Consider bundle size impact
5. Check license compatibility
6. Review security vulnerabilities

### Process
1. Install package
```bash
npm install package-name
# or
yarn add package-name
```

2. Create type declarations if needed
```typescript
// src/types/package-name.d.ts
declare module 'package-name' {
  // Type definitions
}
```

3. Configure package
```typescript
// src/plugins/package-name.ts
import { Plugin } from 'vue'
import PackageName from 'package-name'

export const packageNamePlugin: Plugin = {
  install(app) {
    app.use(PackageName, {
      // Configuration options
    })
  }
}
```

4. Register plugin
```typescript
// src/main.ts
import { createApp } from 'vue'
import { packageNamePlugin } from './plugins/package-name'
import App from './App.vue'

const app = createApp(App)
app.use(packageNamePlugin)
```

## Common Integrations

### UI Libraries
```typescript
// Tailwind CSS
// tailwind.config.js
module.exports = {
  content: ['./index.html', './src/**/*.{vue,js,ts}'],
  theme: {
    extend: {}
  },
  plugins: []
}

// HeadlessUI
import { Menu, Dialog, Transition } from '@headlessui/vue'
```

### State Management
```typescript
// Pinia Store
import { createPinia } from 'pinia'
import { createApp } from 'vue'
import App from './App.vue'

const pinia = createPinia()
const app = createApp(App)
app.use(pinia)
```

### HTTP Client
```typescript
// Axios Instance
import axios from 'axios'

const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  timeout: 10000
})

export default api
```

## Testing Setup

### Vitest Configuration
```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config'
import vue from '@vitejs/plugin-vue'

export default defineConfig({
  plugins: [vue()],
  test: {
    environment: 'jsdom',
    globals: true
  }
})
```

### Cypress Configuration
```javascript
// cypress.config.js
const { defineConfig } = require('cypress')

module.exports = defineConfig({
  e2e: {
    baseUrl: 'http://localhost:3000',
    supportFile: 'cypress/support/e2e.ts'
  }
})
```

## Environment Configuration

### Environment Variables
```env
# .env
VITE_API_URL=http://api.example.com
VITE_APP_TITLE=My Vue App
```

### Type Safety for Env Variables
```typescript
// src/env.d.ts
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_API_URL: string
  readonly VITE_APP_TITLE: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
```

## Build Optimization

### Bundle Analysis
```bash
# Install bundle analyzer
npm install -D rollup-plugin-visualizer

# Configure in vite.config.ts
import { visualizer } from 'rollup-plugin-visualizer'

export default defineConfig({
  plugins: [
    vue(),
    visualizer({
      open: true,
      filename: 'dist/stats.html'
    })
  ]
})
```

### Code Splitting
```typescript
// Router-level code splitting
const routes = [
  {
    path: '/dashboard',
    component: () => import('./views/Dashboard.vue')
  }
]

// Component-level code splitting
const MyComponent = defineAsyncComponent(() =>
  import('./components/MyComponent.vue')
)
``` 