---
description: 
globs: 
alwaysApply: false
---
# Project Structure (Feature Sliced Design)

## Directory Structure

```
justdo-vue/
├── public/                # Static files
├── src/                   # Source files
│   ├── app/              # Application initialization layer
│   │   ├── providers/    # Application providers
│   │   ├── styles/       # Global styles
│   │   ├── types/        # App-level type declarations
│   │   ├── index.ts      # App entry point
│   │   └── App.vue       # Root component
│   ├── pages/            # Pages/Routes layer
│   │   ├── home/
│   │   ├── dashboard/
│   │   └── profile/
│   ├── widgets/          # Complex reusable components with business logic
│   │   ├── header/
│   │   └── sidebar/
│   ├── features/         # User interactions, features
│   │   ├── auth/
│   │   │   ├── ui/      # Feature components
│   │   │   ├── model/   # Business logic (store, effects)
│   │   │   ├── lib/     # Feature-specific utilities
│   │   │   └── api/     # Feature API endpoints
│   │   └── tasks/
│   ├── entities/         # Business entities
│   │   ├── user/
│   │   │   ├── ui/      # Entity components
│   │   │   ├── model/   # Entity store, types
│   │   │   ├── lib/     # Entity utilities
│   │   │   └── api/     # Entity API
│   │   └── task/
│   └── shared/           # Reusable infrastructure
│       ├── api/          # API instance, methods
│       ├── config/       # Application config
│       ├── lib/          # Shared utilities
│       ├── ui/           # UI kit components
│       └── assets/       # Static assets
├── tests/                # Test files
│   ├── unit/
│   └── e2e/
├── .env                  # Environment variables
├── .eslintrc.js         # ESLint configuration
├── .prettierrc          # Prettier configuration
├── index.html           # HTML entry point
├── package.json         # Project dependencies
├── tsconfig.json        # TypeScript configuration
└── vite.config.ts       # Vite configuration
```

## Layer Organization

### App Layer (`app/`)
- Application entry point
- Global providers and configurations
- Root component and layouts
- Global styles and assets

### Pages Layer (`pages/`)
- Route components
- Page-specific layouts
- No business logic, only composition

### Widgets Layer (`widgets/`)
- Complex composite components
- Business logic allowed
- Composites of features and entities
- Example: Header, Sidebar, Dashboard widgets

### Features Layer (`features/`)
- User interactions and features
- Business logic for specific features
- Isolated feature modules
- Structure per feature:
  ```
  feature/
  ├── ui/        # Components
  ├── model/     # Business logic (store)
  ├── lib/       # Utils and helpers
  └── api/       # API endpoints
  ```

### Entities Layer (`entities/`)
- Business entities (User, Task, etc.)
- Entity-specific components and logic
- Structure per entity:
  ```
  entity/
  ├── ui/        # Entity components
  ├── model/     # Entity store, types
  ├── lib/       # Entity utilities
  └── api/       # Entity API calls
  ```

### Shared Layer (`shared/`)
- Reusable infrastructure code
- UI kit components
- API clients and utilities
- Types and interfaces
- Constants and configs

## Naming Conventions

### Files and Directories
- Components: PascalCase (e.g., `UserCard.vue`)
- Pages: PascalCase with 'Page' suffix (e.g., `HomePage.vue`)
- Features: camelCase (e.g., `auth/`, `taskManagement/`)
- Entities: camelCase (e.g., `user/`, `task/`)
- Utilities: camelCase (e.g., `formatDate.ts`)
- Types: PascalCase with type suffix (e.g., `UserModel.ts`)

### Component Structure
Each component should follow this structure:
```vue
<script setup lang="ts">
// Type imports
// Composables
// Props and emits
// State and computed
// Methods
// Lifecycle hooks
</script>

<template>
  <!-- Template content -->
</template>

<style scoped>
/* Component styles */
</style>
```

## Import Rules

### Layer Dependencies
- Shared → Entities → Features → Widgets → Pages → App
- Each layer can only import from layers below it
- Cannot import from same level between slices

### Examples
```typescript
// ✅ Correct
import { Button } from '@/shared/ui'
import { useUser } from '@/entities/user'
import { AuthForm } from '@/features/auth'

// ❌ Incorrect
import { TaskList } from '@/features/tasks' // From another feature
import { Dashboard } from '@/pages/dashboard' // From upper layer
```

## Public API

Each slice should expose its public API through an `index.ts` file:

```typescript
// features/auth/index.ts
export { LoginForm } from './ui/LoginForm.vue'
export { useAuth } from './model/useAuth'
export type { AuthState } from './model/types'
``` 