---
description: 
globs: 
alwaysApply: true
---
# Vue 3 Coding Style Guide

## General Principles

1. Write clean, readable, and maintainable code
2. Follow Vue 3's Composition API best practices
3. Use TypeScript for type safety
4. Keep components small and focused
5. Follow SOLID principles

## Vue Component Style

### Component Organization

```vue
<script setup lang="ts">
// 1. Type imports
import type { PropType } from 'vue'
import type { User } from '@/types'

// 2. Component imports
import BaseButton from '@/components/common/BaseButton.vue'

// 3. Composable imports
import { useUser } from '@/composables/useUser'

// 4. Props
const props = defineProps<{
  user: User
  mode?: 'edit' | 'view'
}>()

// 5. Emits
const emit = defineEmits<{
  (e: 'update', value: User): void
  (e: 'delete'): void
}>()

// 6. Composables
const { updateUser } = useUser()

// 7. Reactive state
const isLoading = ref(false)

// 8. Computed properties
const displayName = computed(() => `${props.user.firstName} ${props.user.lastName}`)

// 9. Methods
const handleUpdate = async () => {
  isLoading.value = true
  try {
    await updateUser(props.user)
    emit('update', props.user)
  } finally {
    isLoading.value = false
  }
}

// 10. Lifecycle hooks
onMounted(() => {
  // Setup code
})
</script>

<template>
  <div class="component-name">
    <!-- Template content -->
  </div>
</template>

<style scoped>
/* Component styles */
</style>
```

## TypeScript Guidelines

### Type Definitions
- Use interfaces for object shapes
- Use type for unions and complex types
- Export types from dedicated type files
- Use generics when appropriate

```typescript
// Good
interface User {
  id: string
  name: string
  email: string
}

type UserRole = 'admin' | 'user' | 'guest'

// Bad
type User = {
  id: string
  name: string
  email: string
}
```

### Composables

```typescript
// composables/useUser.ts
export function useUser() {
  const user = ref<User | null>(null)
  
  const setUser = (newUser: User) => {
    user.value = newUser
  }
  
  return {
    user: readonly(user),
    setUser
  }
}
```

## CSS/SCSS Guidelines

### Scoped Styles
- Use scoped styles by default
- Follow BEM naming convention when needed
- Use CSS variables for theming
- Keep specificity low

```vue
<style scoped>
.component {
  /* Base styles */
}

.component__element {
  /* Element styles */
}

.component__element--modifier {
  /* Modified element styles */
}
</style>
```

## Best Practices

### State Management
- Use Pinia for global state
- Keep component state local when possible
- Use composables for shared logic
- Avoid prop drilling

### Performance
- Use `v-show` for frequent toggles
- Use `v-if` for conditional rendering
- Implement virtual scrolling for long lists
- Use lazy loading for routes and components

### Error Handling
- Use try/catch blocks for async operations
- Implement global error handling
- Provide meaningful error messages
- Log errors appropriately

### Testing
- Write unit tests for components
- Test composables independently
- Use component testing for complex interactions
- Implement e2e tests for critical paths 